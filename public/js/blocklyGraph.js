/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/blocklyGraph.js":
/*!**************************************!*\
  !*** ./resources/js/blocklyGraph.js ***!
  \**************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// Load the Google Chart Tools Visualization API and the chart package.\nif ((typeof google === \"undefined\" ? \"undefined\" : _typeof(google)) == 'object') {\n  google.load('visualization', '1', {\n    packages: ['corechart']\n  });\n} else {\n  alert('Unable to load Google\\'s chart API.\\n' + 'Are you connected to the Internet?');\n} // Define the custom blocks and their JS generators.\n\n\nBlockly.defineBlocksWithJsonArray([{\n  \"type\": \"graph_get_x\",\n  \"message0\": \"x\",\n  \"output\": \"Number\",\n  \"colour\": Blockly.Msg['VARIABLES_HUE'],\n  \"tooltip\": Blockly.Msg['VARIABLES_GET_TOOLTIP'],\n  \"helpUrl\": Blockly.Msg['VARIABLES_GET_HELPURL']\n}]);\n\nBlockly.JavaScript['graph_get_x'] = function (block) {\n  // x variable getter.\n  return ['x', Blockly.JavaScript.ORDER_ATOMIC];\n};\n\nBlockly.defineBlocksWithJsonArray([{\n  \"type\": \"graph_set_y\",\n  \"message0\": \"y = %1\",\n  \"args0\": [{\n    \"type\": \"input_value\",\n    \"name\": \"VALUE\",\n    \"check\": \"Number\"\n  }],\n  \"colour\": Blockly.Msg['VARIABLES_HUE'],\n  \"tooltip\": Blockly.Msg['VARIABLES_SET_TOOLTIP'],\n  \"helpUrl\": Blockly.Msg['VARIABLES_SET_HELPURL']\n}]);\n\nBlockly.JavaScript['graph_set_y'] = function (block) {\n  // y variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE', Blockly.JavaScript.ORDER_ASSIGNMENT) || '';\n  return 'y = ' + argument0 + ';';\n};\n/**\r\n * Create a namespace for the application.\r\n */\n\n\nvar Graph = {};\n/**\r\n * Main Blockly workspace.\r\n * @type {Blockly.WorkspaceSvg}\r\n */\n\nGraph.workspace = null;\n/**\r\n * Cached copy of the function string.\r\n * @type {?string}\r\n * @private\r\n */\n\nGraph.oldFormula_ = null;\n/**\r\n * Drawing options for the Chart API.\r\n * @type {!Object}\r\n * @private\r\n */\n\nGraph.options_ = {\n  //curveType: 'function',\n  width: 400,\n  height: 400,\n  chartArea: {\n    left: '10%',\n    width: '85%',\n    height: '85%'\n  }\n};\n/**\r\n * Visualize the graph of y = f(x) using Google Chart Tools.\r\n * For more documentation on Google Chart Tools, see this linechart example:\r\n * https://developers.google.com/chart/interactive/docs/gallery/linechart\r\n */\n\nGraph.drawVisualization = function () {\n  var formula = Blockly.JavaScript.workspaceToCode(Graph.workspace);\n\n  if (formula === Graph.oldFormula_) {\n    // No change in the formula, don't recompute.\n    return;\n  }\n\n  Graph.oldFormula_ = formula; // Create and populate the data table.\n\n  var data = google.visualization.arrayToDataTable(Graph.plot(formula)); // Create and draw the visualization, passing in the data and options.\n\n  new google.visualization.LineChart(document.getElementById('visualization')).draw(data, Graph.options_); // Create the \"y = ...\" label.  Find the relevant part of the code.\n\n  formula = formula.substring(formula.indexOf('y = '));\n  formula = formula.substring(0, formula.indexOf(';'));\n  var funcText = document.getElementById('funcText');\n  funcText.replaceChild(document.createTextNode(formula), funcText.lastChild);\n};\n/**\r\n * Plot points on the function y = f(x).\r\n * @param {string} code JavaScript code.\r\n * @return {!Array.<!Array>} 2D Array of points on the graph.\r\n */\n\n\nGraph.plot = function (code) {\n  // Initialize a table with two column headings.\n  var table = [];\n  var y; // TODO: Improve range and scale of graph.\n\n  for (var x = -10; x <= 10; x = Math.round((x + 0.1) * 10) / 10) {\n    try {\n      eval(code);\n    } catch (e) {\n      y = NaN;\n    }\n\n    if (!isNaN(y)) {\n      // Prevent y from being displayed inconsistently, some in decimals, some\n      // in scientific notation, often when y has accumulated rounding errors.\n      y = Math.round(y * Math.pow(10, 14)) / Math.pow(10, 14);\n      table.push([x, y]);\n    }\n  } // Add column heading to table.\n\n\n  if (table.length) {\n    table.unshift(['x', 'y']);\n  } else {\n    // If the table is empty, add a [0, 0] row to prevent graph error.\n    table.unshift(['x', 'y'], [0, 0]);\n  }\n\n  return table;\n};\n/**\r\n * Force Blockly to resize into the available width.\r\n */\n\n\nGraph.resize = function () {\n  //var width = Math.max(window.innerWidth - 440, 250);\n  var elem = document.getElementById(\"blocklyContainer\");\n  var width = Math.max(elem.clientWidth - 20, 250);\n  document.getElementById('blocklyDiv').style.width = width + 'px';\n  Blockly.svgResize(Graph.workspace);\n};\n/**\r\n * Initialize Blockly and the graph.  Called on page load.\r\n */\n\n\nGraph.init = function () {\n  Graph.workspace = Blockly.inject('blocklyDiv', {\n    collapse: false,\n    disable: false,\n    media: 'https://unpkg.com/blockly/media/',\n    toolbox: document.getElementById('toolbox')\n  });\n  Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'), Graph.workspace);\n  Graph.workspace.clearUndo(); // When Blockly changes, update the graph.\n\n  Graph.workspace.addChangeListener(Graph.drawVisualization);\n  Graph.workspace.addChangeListener(Blockly.Events.disableOrphans);\n  Graph.resize();\n};\n\nwindow.addEventListener('load', Graph.init);\nwindow.addEventListener('resize', Graph.resize);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/blocklyGraph.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/blocklyGraph.js"]();
/******/ 	
/******/ })()
;